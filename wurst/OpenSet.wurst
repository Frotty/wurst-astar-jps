package OpenSet
import SearchNode
import HashMap
import PairingHeap

/** Stores all nodes that should be considered for path finding. */
public class OpenSet
    let heap = new PairingHeap<real, SearchNode>((i1, i2) -> (i1 - i2).toInt())
    let map = new HashMap<int, SearchNode>

    /** Removes and returns the next node in the open set with the lowest G value */
    function poll() returns SearchNode
        SearchNode result = null
        var ret = heap.deleteMin()
        if ret != null
            while not map.has(ret.hash())
                ret = heap.deleteMin()
            map.remove(ret.hash())
            result = ret
        return result

    function add(SearchNode node)
        heap.add(node.f(), node)
        map.put(node.hash(), node)

    function isEmpty() returns boolean
        return heap.isEmpty()

    function remove(SearchNode node)
        map.remove(node.hash())

    function getNode(SearchNode node) returns SearchNode
        if map.has(node.hash())
            return map.get(node.hash())
        return null

    ondestroy
        destroy map
        destroy heap
